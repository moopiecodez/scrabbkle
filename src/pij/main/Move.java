package pij.main;

import java.util.regex.Pattern;

import pij.main.dictionary.Dictionary;

/**
 * Abstract class of Moves in the Scrabbkle game can be extended by WordMove and
 * Pass.
 * @author Maurane van der Stoep
 *
 */
public abstract class Move {

    /**
     * Direction a move is played in.
     *
     * @author Maurane van der Stoep
     *
     */
    public enum Direction { right, down }

    /**
     * Takes a string representation of a move and checks it is syntactically
     * valid as a move
     *
     * (e.g. GIT,f8,d or ,, for a pass).
     *
     * @param input string representation of the move.
     * @return boolean true if valid syntax for a move.
     */
    public static boolean validateString(final String input) {
        String letters = ("\\p{Alpha}{1,7}");
        String position = ("\\p{Lower}\\d{1,2}");
        String direction = ("[rd]");
        String moveFmt = "%s,%s,%s|,,";
        String regex = String.format(moveFmt, letters, position, direction);

        return Pattern.matches(regex, input);
    }

    /**
     * Generate a new Move from a string representation in the format
     * ("GIT,f8,d").
     * @param string to generate the Move
     * @return Move
     */
    public static Move fromString(final String string) {
        Move move;

        switch (string) {
            case ",,":
                move = new Pass();
                break;
            default:
                String[] parts = string.split(",");
                String letters = parts[0];
                Position position = Position.fromString(parts[1]);
                Direction direction;
                switch (parts[2]) {
                    case "r":
                        direction = Direction.right;
                        break;
                    case "d":
                        direction = Direction.down;
                        break;
                    default:
                        direction = null;
                }
                move = new WordMove(letters, position, direction);
        }
        return move;
    }

    /**
     * Abstract method to update counter tracking number of times a Player has
     * passed consecutively.
     * @param player
     */
    public abstract void updatePassCounter(final Player player);

    /**
     * Abstract method to provide the letters to be taken from a Player's rack
     * for a particular Move.
     * @return String of letters
     */
    public abstract String getLetters();

    /**
     * Abstract method to return the Position of a Move.
     * @return Position
     */
    public abstract Position getPosition();

    /**
     * Abstract method to return the Direction of a Move.
     * @return Direction
     */
    public abstract Direction getDirection();

    /**
     * Abstract method for validating a Move given the current Board, Rack and
     * the Dictionary.
     * @param board
     * @param rack
     * @param dictionary
     * @return true if Move valid
     */
    public abstract boolean validate(
            Board board, Rack rack, Dictionary dictionary);

    /**
     * Abstract method to return an error message explaining why a Move is not
     * valid.
     * @return string error message
     */
    public abstract String getErrorMsg();

    /**
     * Abstract method to return the score generated by placing a Move.
     * @param board
     * @param rack
     * @return int score value
     */
    public abstract int place(Board board, Rack rack);
}
